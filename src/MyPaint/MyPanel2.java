package MyPaint;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Rectangle2D;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author shaym
 */
public class MyPanel2 extends javax.swing.JPanel implements DrawingEngine, MouseListener, MouseMotionListener{

    private ArrayList<Shape> shapes;
    private Paint mainWindow;
    
    boolean resizing = false;
    AbstractShape a, pre;
    
    int currentIndex = 0;
    Point pdrag = new Point();
     private int Ex, Ey;
//    private Point2D[] lastPoints = new Point2D[3];
    Rectangle2D[] points = new Rectangle2D.Double[4];
    
    /**
     * Creates new form MyPanel2
     * @param paint
     */
    public MyPanel2(Paint paint) { 
        initComponents();
        shapes = new ArrayList<>();
        mainWindow = paint;
        addMouseListener(this);
        addMouseMotionListener(this);
    }
    
    public MyPanel2(){}
    
    public void save(String path){
        JSONArray shapeList = new JSONArray();
        for (Shape shape : shapes) {
            AbstractShape object = (AbstractShape) shape;
            shapeList.add(object.toJsonobject());
        }
        try(FileWriter wFile = new FileWriter(path)){
            wFile.write(shapeList.toJSONString());
            wFile.flush();
        }
        catch(IOException e){
            System.out.println("Can't write .json File!");
        }
    }
    
    public void load(String path){
        shapes.clear();    

        org.json.simple.JSONArray ja = null;
        JSONParser jParser = new JSONParser();
        try {
            Object obj = jParser.parse(new FileReader(path));
            ja = (JSONArray) obj;
        } 
        catch (IOException e) {
            System.out.println("IOException");
        }
        catch (ParseException ex) {
            System.out.println("!!!!!!");
        } 
        
        for (Object object : ja) {
            JSONObject jo = (JSONObject) object;
            AbstractShape shape = AbstractShape.JObjectToShape(jo);
            mainWindow.addToComboAndPanel(shape);
        }
        refresh(null);
        System.out.println("Load success!");

    }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        for (Shape s : shapes){
            s.draw(g);
            if (s ==a) {
                a.pointPressed(pdrag, g);
                resizing = a.readyToMove(pdrag);
            }
        }
    }
    
    @Override
    public void addShape(Shape shape) {
        shapes.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
        shapes.remove(shape);
    }

    @Override
    public Shape[] getShapes() {
        return shapes.toArray(Shape[]::new);
    }

    @Override
    public void refresh(Graphics canvas) {
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent e) {
        Point pointentered = new Point(e.getX(), e.getY());
        for (int i = shapes.size() - 1; i >= 0; i--) {
            if (((AbstractShape) shapes.get(i)).Contains(pointentered)) {
                a = ((AbstractShape) shapes.get(i));
              
                mainWindow.setComboIndex(i+1);
                refresh(null);
                break;
            }
        }
    } 

    @Override
    public void mousePressed(MouseEvent e) {
        Ex = e.getX();
        Ey = e.getY();
        pdrag = new Point(e.getX(), e.getY());
        int i;
        for (i = shapes.size() - 1; i >= 0; i--) {
            a = ((AbstractShape) shapes.get(i));
            if (a.Contains(new Point(Ex, Ey)) || a.readyToMove(pdrag)) {
                mainWindow.setComboIndex(i+1);
                currentIndex = i;
                a.setDraggingPoint(new Point(Ex, Ey));
                pre = a;
                break;
            } else if (a != null) {
                pre = a;
                a = null;
            } else {
                a = null;
            }
        }
    }
    
    @Override
    public void mouseDragged(MouseEvent e) {
        pdrag = new Point(e.getX(), e.getY());
        if (resizing) {
            pre.Resize(pdrag);
            refresh(null);
        } 
        
        else if (a != null) {
            a.MoveTo(pdrag);
            refresh(null);
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        resizing = false;
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {
  
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
